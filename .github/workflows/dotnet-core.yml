name: CI/CD

on:
  
  pull_request:
    branches:
    - master
    types:
    - opened
    - synchronize
    - reopened
    
  push:
    branches:
    - master

  release:
    types:
    - published
  
jobs:

  dotnet-build:
    if: github.event_name != 'release'
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setting VERSION and BRANCH env
        run: |
          echo "::set-env name=VERSION::$NBGV_NuGetPackageVersion"
          echo "::set-env name=BRANCH::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
        
      - uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Install dependencies
        run: dotnet restore

#      - name: Install dotnet-sonarscanner
#        run: dotnet tool install --global dotnet-sonarscanner

      - name: Build
        run: dotnet build --configuration Release --no-restore
      
      - name: Test
        run: dotnet test --no-restore --verbosity normal --collect "Code coverage"


#      - name: Build with SonarCloud
#        shell: bash
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          dotnet sonarscanner begin /k:${{ secrets.SONAR_PRODUCT_KEY }} /o:"atc-net" /n:"atc-cosmos-eventstore" /v:"$NBGV_NuGetPackageVersion" /d:sonar.login="$SONAR_TOKEN" /d:sonar.host.url=https://sonarcloud.io /d:sonar.branch.name="$BRANCH" /d:sonar.verbose="true" /d:sonar.cs.opencover.reportsPaths="tests/**/coverage/*.opencover.xml"
#          dotnet build --configuration Release --no-restore
#          dotnet test test/Atc.Cosmos.EventStore.Tests/ /p:CollectCoverage=true /p:CoverletOutput=./coverage/ /p:CoverletOutputFormat=opencover /p:ExcludeByAttribute=\"Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute\"
#          dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
          
  publish-internal:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      VERSION: ''
      BRANCH: ''

    steps:
    
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

      - uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: Setting VERSION and BRANCH env
        run: |
          echo "::set-env name=VERSION::$NBGV_NuGetPackageVersion"
          echo "::set-env name=BRANCH::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
          
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
          # Authenticates packages to push to GPR
          source-url: https://nuget.pkg.github.com/atc-net/index.json
        env:
          NUGET_AUTH_TOKEN: '%NUGET_AUTH_TOKEN%'

      - name: Install dependencies
        run: dotnet restore

      - name: Creating library package for pre-release
        run: |
          dotnet pack -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true

      - name: Push package to Github registry
        run: dotnet nuget push "${GITHUB_WORKSPACE}/packages/*.nupkg" --no-symbols --skip-duplicate
        env:
          NUGET_AUTH_TOKEN: ${{ github.token }}

#      - name: Push packages to GitHub Package Registry
#        shell: bash
#        run: |
#           for f in ${GITHUB_WORKSPACE}/packages/*.nupkg
#           do
#             curl -vX PUT -u "${{ secrets.GITHUB_TOKEN }}" -F package=@$f https://nuget.pkg.github.com/atc-net/
#           done
          
#  publish-nuget-package-release:
#    if: github.event_name == 'release'
#    runs-on: ubuntu-latest
#    env:
#      VERSION: ''
#      BRANCH: ''
#
#    steps:
#    
#      - name: Checkout Repository
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
#
#      - uses: dotnet/nbgv@master
#        with:
#          setAllVars: true
#
#      - name: Setting VERSION and BRANCH env
#        run: |
#          echo "::set-env name=VERSION::$NBGV_NuGetPackageVersion"
#          echo "::set-env name=BRANCH::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
#          
#      - name: Setup .NET Core
#        uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: '3.1.x'
#      - uses: actions/setup-dotnet@v1
#        with:
#          dotnet-version: '5.0.x'
#
#      - name: Install dependencies
#        run: dotnet restore
#
#      - name: Creating library package for pre-release
#        if: github.event_name != 'release'
#        run: |
#          dotnet pack -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=$BRANCH -p:ContinuousIntegrationBuild=true
#
#      - name: Creating library package for release
#        if: github.event_name == 'release'
#        run: |
#          dotnet pack -c Release -o ${GITHUB_WORKSPACE}/packages -p:RepositoryBranch=main -p:ContinuousIntegrationBuild=true /p:PublicRelease=true
#
#      - name: Push packages to GitHub Package Registry
#        shell: bash
#        run: |
#           for f in ${GITHUB_WORKSPACE}/packages/*.nupkg
#           do
#             curl -vX PUT -u "${{ secrets.GITHUB_TOKEN }}" -F package=@$f https://nuget.pkg.github.com/atc-net/
#           done
#
#      - name: Push packages to NuGet
#        if: github.event_name == 'release'
#        run: dotnet nuget push ${GITHUB_WORKSPACE}/packages/'*.nupkg' -k ${{ secrets.NUGET_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate --no-symbols true
#
